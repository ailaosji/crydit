---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import GiscusComments from '../../components/GiscusComments.astro';
import FeeTable from '../../components/FeeTable.tsx';

// Ensure this function is correctly exported
export async function getStaticPaths() {
  try {
    const cards = await getCollection('cards');
    return cards.map((card) => ({
      params: { slug: card.slug },
      props: { card },
    }));
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

// Type definition
interface Props {
  card: CollectionEntry<'cards'>;
}

// Get passed props
const { card } = Astro.props as Props;

// Check if card exists
if (!card) {
  throw new Error('Card not found');
}

const { 
  title, name, description, network, cardType,
  pros, cons, features, limits, rewards, issuer, supportedRegions,
  applicationDocuments, supportedCurrencies, supportedPaymentMethods,
  virtualCardPrice, physicalCardPrice, depositFee, transactionFee,
  foreignExchangeFee, withdrawalFee, annualFee, affiliateLink,
  invitationCode, importantReminders
} = card.data;

// Recommendation algorithm for related cards
const allCards = await getCollection('cards');
const relatedCards = allCards
  .map(otherCard => {
    if (otherCard.slug === card.slug) {
      return { card: otherCard, score: -1 };
    }
    let score = 0;
    if (otherCard.data.network === network) score += 3;
    const commonTags = (card.data.tags || []).filter(tag => (otherCard.data.tags || []).includes(tag));
    score += commonTags.length * 2;
    const commonCurrencies = (card.data.supportedCurrencies || []).filter(currency => (otherCard.data.supportedCurrencies || []).includes(currency));
    score += commonCurrencies.length;
    if (otherCard.data.issuer === issuer) score -= 100;
    return { card: otherCard, score };
  })
  .filter(item => item.score > 0)
  .sort((a, b) => b.score - a.score)
  .map(item => item.card)
  .slice(0, 3);

// Recommendation algorithm for related articles
const allArticles = await getCollection('articles');
const relatedArticles = allArticles
  .map(article => {
    let score = 0;
    const articleTitle = article.data.title.toLowerCase();
    const cardName = name.toLowerCase();
    const cardIssuer = issuer.toLowerCase();
    if ((article.data.relatedCards || []).includes(card.slug)) score += 10;
    if (articleTitle.includes(cardName)) score += 5;
    if (articleTitle.includes(cardIssuer)) score += 3;
    const commonTags = (card.data.tags || []).filter(tag => (article.data.tags || []).includes(tag));
    score += commonTags.length * 2;
    return { article, score };
  })
  .filter(item => item.score > 0)
  .sort((a, b) => b.score - a.score)
  .map(item => item.article)
  .slice(0, 4);

// Render Markdown content
const { Content } = await card.render();

import { getCurrencyInfo } from '../../config/site-data';
function getPaymentMethodInfo(method) {
  const method_lower = method.toLowerCase().replace(/\s+/g, '');
  switch(method_lower) {
    case 'applepay': return { name: 'Apple Pay', bgGradient: 'from-gray-800 to-black', bgLight: 'bg-gray-50', borderColor: 'border-gray-200', textColor: 'text-gray-800', icon: '/icons/methods/applepay.svg' };
    case 'googlepay': return { name: 'Google Pay', bgGradient: 'from-blue-500 via-green-500 to-yellow-500', bgLight: 'bg-blue-50', borderColor: 'border-blue-200', textColor: 'text-blue-700', icon: '/icons/methods/googlepay.svg' };
    case 'alipay': return { name: 'Alipay', bgGradient: 'from-blue-500 to-cyan-500', bgLight: 'bg-blue-50', borderColor: 'border-blue-200', textColor: 'text-blue-700', icon: '/icons/methods/alipay.svg' };
    case 'wechatpay': case 'wechat pay': return { name: 'WeChat Pay', bgGradient: 'from-green-500 to-green-600', bgLight: 'bg-green-50', borderColor: 'border-green-200', textColor: 'text-green-700', icon: '/icons/methods/wechatpay.svg' };
    default: return { name: method, bgGradient: 'from-gray-400 to-gray-500', bgLight: 'bg-gray-50', borderColor: 'border-gray-200', textColor: 'text-gray-700', icon: '' };
  }
}

// Generate structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Product",
  "name": name,
  "description": description,
  "brand": { "@type": "Brand", "name": issuer },
  "offers": {
    "@type": "Offer",
    "price": virtualCardPrice || physicalCardPrice || "0",
    "priceCurrency": "USD",
    "availability": "https://schema.org/InStock"
  },
  "category": "Financial Services",
  "additionalProperty": [
    { "@type": "PropertyValue", "name": "Card Network", "value": network },
    { "@type": "PropertyValue", "name": "Card Type", "value": cardType }
  ]
};
---
<Layout title={title || `${name} - 全球虚拟信用卡评测`}>
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
  
  <div class="min-h-screen bg-gradient-to-br from-gray-50 to-indigo-50 py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <div class="bg-white rounded-3xl shadow-2xl overflow-hidden mb-12">
        <div class="relative">
          <div class="absolute inset-0 bg-gradient-to-br from-indigo-600 via-purple-600 to-pink-500"></div>
          <div class="relative p-8 lg:p-12">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
              <div class="text-white">
                <div class="flex flex-wrap items-center gap-3 mb-6">
                  <span class={`px-4 py-2 rounded-full text-sm font-semibold ${
                    network === 'visa' ? 'bg-blue-500 text-white' :
                    network === 'mastercard' ? 'bg-red-500 text-white' :
                    'bg-gray-500 text-white'
                  }`}>
                    {network?.toUpperCase()}
                  </span>
                  {(cardType === 'virtual' || cardType === 'both') && (
                    <span class="px-4 py-2 bg-white/20 backdrop-blur-sm rounded-full text-sm font-medium">虚拟卡</span>
                  )}
                  {(cardType === 'physical' || cardType === 'both') && (
                    <span class="px-4 py-2 bg-white/20 backdrop-blur-sm rounded-full text-sm font-medium">实体卡</span>
                  )}
                </div>
                <h1 class="text-4xl lg:text-5xl font-bold mb-4">{name}</h1>
                <p class="text-xl text-white/90 leading-relaxed mb-8">{description}</p>
                {affiliateLink && (
                  <a href={affiliateLink} target="_blank" rel="noopener noreferrer" class="inline-flex items-center px-8 py-4 bg-white text-indigo-600 font-bold rounded-2xl hover:bg-gray-100 transition-all transform hover:scale-105 shadow-lg">
                    立即申请
                    <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path></svg>
                  </a>
                )}
              </div>
              
              <div class="relative">
                <div class="absolute -top-4 -right-4 bg-green-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg z-10">推荐</div>
                <div class="relative w-96 h-60 rounded-2xl shadow-2xl transform rotate-3 hover:rotate-0 transition-all duration-300 hover:scale-105">
                  <div class="absolute inset-0 bg-gradient-to-br from-gray-800 via-gray-900 to-purple-900 rounded-2xl"></div>
                  <div class="absolute top-8 right-8 w-32 h-32 bg-gradient-to-br from-purple-400/20 to-transparent rounded-full"></div>
                  <div class="absolute -bottom-4 -left-4 w-24 h-24 bg-gradient-to-br from-pink-400/10 to-transparent rounded-full"></div>
                  <div class="relative z-10 p-8 h-full flex flex-col justify-between text-white">
                    <div class="flex justify-between items-start">
                      <div class="w-12 h-9 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-md shadow-inner"></div>
                      <div class="text-2xl font-bold text-white/90 tracking-wider">{network?.toUpperCase()}</div>
                    </div>
                    <div class="space-y-6"><div class="font-mono text-2xl tracking-wider">•••• •••• •••• ••••</div></div>
                    <div class="flex justify-between items-end">
                      <div>
                        <div class="text-xs text-gray-400 mb-1">CARD HOLDER</div>
                        <div class="font-semibold text-lg">{name && name.length > 12 ? name.substring(0, 12) + '...' : name}</div>
                      </div>
                      <div>
                        <div class="text-xs text-gray-400 mb-1">VALID THRU</div>
                        <div class="font-mono text-lg">••/••</div>
                      </div>
                    </div>
                  </div>
                  <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent rounded-2xl transform -skew-x-12 -translate-x-full animate-pulse"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div class="lg:col-span-2 space-y-8">
          <section class="bg-white rounded-3xl shadow-xl p-8">
            <div class="prose prose-lg max-w-none">
              <Content />
            </div>
          </section>
          
          {hasTiers ? (
            <div class="space-y-8">
              <FeeTable client:load tiers={tiers} cardName={name} />
              <section class="bg-white rounded-3xl shadow-xl p-8"><h2 class="text-3xl font-bold text-gray-900 mb-8">支持的加密货币</h2>{supportedCurrencies && supportedCurrencies.length > 0 ? <div class="flex flex-wrap items-center gap-3">{supportedCurrencies.map(currency => { const currencyInfo = getCurrencyInfo(currency); return <div class="flex flex-col items-center p-2 group cursor-pointer"><div class={`w-14 h-14 bg-gradient-to-br ${currencyInfo.bgGradient} rounded-full flex items-center justify-center text-white shadow-lg group-hover:scale-110 transition-transform duration-300 text-xl font-bold mb-2`}><img src={currencyInfo.icon} alt={`${currencyInfo.name} icon`} class="w-8 h-8" /></div><span class={`text-xs font-medium ${currencyInfo.textColor} opacity-80 group-hover:opacity-100`}>{currencyInfo.symbol}</span></div>; })}</div> : <p>暂无数据</p>}</section>
              <section class="bg-white rounded-3xl shadow-xl p-8">
                <h2 class="text-3xl font-bold text-gray-900 mb-8">支持的支付方式</h2>
                {supportedPaymentMethods && supportedPaymentMethods.length > 0 ? (
                  <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
                    {supportedPaymentMethods.map(method => {
                      const info = getPaymentMethodInfo(method);
                      return (
                        <div class={`group flex flex-col items-center p-6 ${info.bgLight} rounded-2xl border-2 ${info.borderColor} hover:scale-105 hover:shadow-lg transition-all`}>
                          <div class={`relative w-16 h-16 bg-gradient-to-br ${info.bgGradient} rounded-2xl flex items-center justify-center mb-4 shadow-md group-hover:scale-110`}>
                            <img src={info.icon} alt={`${info.name} icon`} class="w-8 h-8" />
                          </div>
                          <span class={`font-bold ${info.textColor} text-center`}>
                            {info.name}
                          </span>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p>暂无数据</p>
                )}
              </section>
              <section class="bg-white rounded-3xl shadow-xl p-8"><h2 class="text-3xl font-bold text-gray-900 mb-8">优缺点分析</h2><div class="grid md:grid-cols-2 gap-8">{pros && pros.length > 0 && <div><h3 class="text-xl font-semibold text-green-600 mb-4 flex items-center"><svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>优点</h3><ul class="space-y-3">{pros.map(pro => <li class="flex items-start"><svg class="w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg><span class="text-gray-700">{pro}</span></li>)}</ul></div>}{cons && cons.length > 0 && <div><h3 class="text-xl font-semibold text-red-600 mb-4 flex items-center"><svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>缺点</h3><ul class="space-y-3">{cons.map(con => <li class="flex items-start"><svg class="w-5 h-5 text-red-500 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg><span class="text-gray-700">{con}</span></li>)}</ul></div>}</div></section>
              {features && features.length > 0 && <section class="bg-white rounded-3xl shadow-xl p-8"><h2 class="text-3xl font-bold text-gray-900 mb-8">特色功能</h2><div class="grid md:grid-cols-2 gap-4">{features.map(feature => <div class="flex items-center p-4 bg-indigo-50 rounded-xl"><svg class="w-6 h-6 text-indigo-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span class="text-gray-800 font-medium">{feature}</span></div>)}</div></section>}
            </div>
          ) : (
            <div class="space-y-8">
              {/* Single-tier card rendering */}
              <section class="bg-white rounded-3xl shadow-xl p-8">
                <h2 class="text-3xl font-bold text-gray-900 mb-8">费用详情</h2>
                <div class="overflow-x-auto">
                  <table class="w-full text-left border-collapse">
                    <thead class="bg-gray-50">
                      <tr>
                        <th class="px-6 py-4 font-bold uppercase text-sm text-gray-600 border-b border-gray-200">费用项目</th>
                        <th class="px-6 py-4 font-bold uppercase text-sm text-gray-600 border-b border-gray-200">费率</th>
                      </tr>
                    )}
                    {(cardType === 'physical' || cardType === 'both') && (
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 border-b border-gray-200">实体卡开卡费</td>
                        <td class="px-6 py-4 border-b border-gray-200 font-medium">{physicalCardPrice === 0 ? '免费' : `${physicalCardPrice}`}</td>
                      </tr>
                    )}
                    {depositFee !== undefined && (
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 border-b border-gray-200">充值手续费</td>
                        <td class="px-6 py-4 border-b border-gray-200 font-medium">{depositFee}</td>
                      </tr>
                    )}
                    {transactionFee !== undefined && (
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 border-b border-gray-200">交易手续费</td>
                        <td class="px-6 py-4 border-b border-gray-200 font-medium">{transactionFee}</td>
                      </tr>
                    )}
                    {foreignExchangeFee !== undefined && (
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 border-b border-gray-200">外汇手续费</td>
                        <td class="px-6 py-4 border-b border-gray-200 font-medium">{foreignExchangeFee}</td>
                      </tr>
                    )}
                    {withdrawalFee !== undefined && (
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 border-b border-gray-200">提现/ATM手续费</td>
                        <td class="px-6 py-4 border-b border-gray-200 font-medium">{withdrawalFee}</td>
                      </tr>
                    )}
                    {annualFee !== undefined && (
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 border-b border-gray-200">年费</td>
                        <td class="px-6 py-4 border-b border-gray-200 font-medium">{!annualFee ? '免费' : '收费'}</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </section>

            {limits && (
              <section class="bg-white rounded-3xl shadow-xl p-8">
                <h2 class="text-3xl font-bold text-gray-900 mb-8">消费限额</h2>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {Object.entries(limits).map(([key, value]) => {
                    const limitLabels = { dailySpending: '每日消费', monthlySpending: '每月消费', singleTransaction: '单笔交易', monthlyAtmWithdrawal: '每月ATM取款' };
                    return value ? (
                      <div class="p-4 bg-indigo-50 rounded-xl border border-indigo-100">
                        <p class="text-sm text-gray-600">{limitLabels[key] || key}</p>
                        <p class="text-lg font-bold text-indigo-600">{value}</p>
                      </div>
                    ) : null;
                  })}
                </div>
              </section>
            )}
          </div>

          <GiscusComments title={`${name} 用户评论`} />
        </div>

        <div class="space-y-8">
          <div class="bg-white rounded-3xl shadow-xl p-8 sticky top-24">
            <h3 class="text-2xl font-bold text-gray-900 mb-6">基本信息</h3>
            <div class="space-y-4">
              <div class="flex justify-between items-center py-2 border-b border-gray-100">
                <span class="text-gray-600">发卡机构</span>
                <span class="font-medium text-gray-900">{issuer}</span>
              </div>
              <div class="flex justify-between items-center py-2 border-b border-gray-100">
                <span class="text-gray-600">卡片网络</span>
                <span class={`px-3 py-1 rounded-full text-xs font-medium ${
                  network === 'visa' ? 'bg-blue-100 text-blue-800' :
                  network === 'mastercard' ? 'bg-red-100 text-red-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {network?.toUpperCase()}
                </span>
              </div>
              <div class="flex justify-between items-center py-2 border-b border-gray-100">
                <span class="text-gray-600">申请证件</span>
                <span class="font-medium text-gray-900">{applicationDocuments && applicationDocuments.length > 0 ? applicationDocuments.join(' / ') : 'N/A'}</span>
              </div>
              {rewards && rewards.cashback && (
                <div class="flex justify-between items-center py-2 border-b border-gray-100">
                  <span class="text-gray-600">返现比例</span>
                  <span class="font-medium text-green-600">{rewards.cashback}</span>
                </div>
              )}
              <div class="flex justify-between items-center py-2">
                <span class="text-gray-600">年费</span>
                <span class={`font-medium ${annualFee ? 'text-red-600' : 'text-green-600'}`}>{annualFee ? '收费' : '免费'}</span>
              </div>
            </div>
            {affiliateLink && (
              <a href={affiliateLink} target="_blank" rel="noopener noreferrer" class="mt-6 w-full inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-medium rounded-2xl hover:from-indigo-700 hover:to-purple-700 transition-all transform hover:scale-105">
                立即申请
                <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path></svg>
              </a>
            )}
            {invitationCode && (
              <div class="mt-6 pt-6 border-t border-gray-100">
                <label for="invite-code" class="block text-sm font-medium text-gray-700 mb-2">邀请码</label>
                <div class="relative">
                  <input id="invite-code" type="text" readonly value={invitationCode} class="w-full pl-4 pr-20 py-2.5 bg-gray-50 border border-gray-200 rounded-xl font-mono text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                  <button id="copy-button" class="absolute inset-y-0 right-0 flex items-center px-4 bg-gray-200 text-gray-700 font-semibold text-sm rounded-r-xl hover:bg-gray-300 transition-colors">复制</button>
                </div>
              </div>
            )}
          </div>

          {relatedCards && relatedCards.length > 0 && (
            <div class="bg-white rounded-3xl shadow-xl p-8">
              <h3 class="text-2xl font-bold text-gray-900 mb-6">相关U卡推荐</h3>
              <div class="space-y-4">
                {relatedCards.map((relatedCard) => (
                  <a href={`/cards/${relatedCard.slug}`} class="block p-4 bg-gray-50 rounded-xl hover:bg-indigo-50 transition-colors">
                    <div class="flex items-center justify-between">
                      <div>
                        <h4 class="font-semibold text-gray-900">{relatedCard.data.name}</h4>
                        <p class="text-sm text-gray-600 mt-1">{relatedCard.data.network?.toUpperCase()}</p>
                      </div>
                      <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  const copyButton = document.getElementById('copy-button');
  const inviteCodeInput = document.getElementById('invite-code');
  if (copyButton && inviteCodeInput) {
    copyButton.addEventListener('click', () => {
      const codeToCopy = inviteCodeInput.value;
      navigator.clipboard.writeText(codeToCopy).then(() => {
        copyButton.textContent = '已复制!';
        copyButton.classList.add('bg-green-500', 'text-white');
        setTimeout(() => {
          copyButton.textContent = '复制';
          copyButton.classList.remove('bg-green-500', 'text-white');
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy: ', err);
        copyButton.textContent = '失败';
        copyButton.classList.add('bg-red-500', 'text-white');
         setTimeout(() => {
          copyButton.textContent = '复制';
          copyButton.classList.remove('bg-red-500', 'text-white');
        }, 2000);
      });
    });
  }
</script>
