---
// src/pages/cards/index.astro
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { CARD_NETWORKS } from '../../constants';

let allCardsRaw = [];
try {
  allCardsRaw = await getCollection('cards');
} catch (error) {
  console.error('Error loading cards:', error);
  allCardsRaw = []; // Fallback to empty array on error
}

// Process cards to handle tiers and promote representative data
const allCards = allCardsRaw.map((card) => {
  if (!card.data.cardTiers || card.data.cardTiers.length === 0) {
    return card; // Return unmigrated card as is
  }

  const representativeTier =
    card.data.cardTiers.find((t) => t.recommended) || card.data.cardTiers[0];
  if (!representativeTier) {
    return card; // Should not happen if cardTiers is not empty
  }

  const promotedData = {
    network: representativeTier.virtualNetwork || representativeTier.physicalNetwork,
    cardType:
      representativeTier.isVirtual && representativeTier.isPhysical
        ? 'both'
        : representativeTier.isVirtual
          ? 'virtual'
          : 'physical',
    transactionFee: representativeTier.fees?.transactionFee,
    annualFee: representativeTier.fees?.annualFee ? true : false, // Simplified for now
    ...representativeTier,
    ...representativeTier.fees,
    ...representativeTier.rewards,
  };

  return {
    ...card,
    data: {
      ...card.data,
      ...promotedData,
    },
  };
});

// Initial sort: by publish date
allCards.sort(
  (a, b) =>
    new Date(b.data.publishDate || 0).getTime() - new Date(a.data.publishDate || 0).getTime()
);
---

<Layout title="U卡评测列表 - 专业的数字货币U卡评测">
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
    <!-- Hero Section -->
    <section
      class="relative overflow-hidden bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-700 py-20"
    >
      <div
        class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.1),transparent_70%)]"
      >
      </div>
      <div
        class="absolute left-0 top-0 h-96 w-96 -translate-x-48 -translate-y-48 rounded-full bg-white/10 blur-3xl"
      >
      </div>

      <div class="relative mx-auto max-w-7xl px-6 text-center lg:px-8">
        <div
          class="mb-8 inline-flex items-center rounded-full border border-white/30 bg-white/20 px-4 py-2 text-sm font-medium text-white/90 backdrop-blur-sm"
        >
          <span class="mr-2 h-2 w-2 animate-pulse rounded-full bg-green-400"></span>
          实时更新 · 专业评测
        </div>

        <h1 class="mb-6 text-5xl font-bold text-white lg:text-6xl">
          全球顶级 <span
            class="bg-gradient-to-r from-yellow-300 to-pink-300 bg-clip-text text-transparent"
            >数字货币U卡</span
          >
        </h1>

        <p class="mx-auto mb-8 max-w-3xl text-xl text-white/90">
          深度评测市场主流数字货币卡片，帮您找到最适合的加密支付方案
        </p>

        <div class="flex flex-wrap justify-center gap-4">
          <div class="rounded-full border border-white/30 bg-white/20 px-6 py-3 backdrop-blur-sm">
            <span class="font-semibold text-white">{allCards.length}+ 卡片评测</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Filters and Search Bar -->
    <section class="sticky top-0 z-40 bg-white py-8 shadow-sm">
      <div class="mx-auto max-w-7xl px-6 lg:px-8">
        <div class="mb-6">
          <div class="relative mx-auto max-w-md">
            <input
              type="text"
              id="searchInput"
              placeholder="搜索卡片名称或发行商..."
              class="w-full rounded-full border border-gray-200 bg-gray-50 px-4 py-3 pl-12 pr-4 text-gray-700 focus:border-indigo-500 focus:bg-white focus:outline-none"
            />
            <svg
              class="absolute left-4 top-3.5 h-5 w-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg
            >
          </div>
        </div>

        <div class="flex flex-wrap justify-center gap-4">
          <!-- Network Filter -->
          <div class="relative">
            <select
              id="networkFilter"
              class="appearance-none rounded-lg border border-gray-200 bg-gray-50 px-4 py-2 pr-8 text-gray-700 focus:border-indigo-500 focus:bg-white focus:outline-none"
            >
              <option value="">所有网络</option>
              {
                Object.entries(CARD_NETWORKS).map(([key, value]) => (
                  <option value={value}>{key.charAt(0) + key.slice(1).toLowerCase()}</option>
                ))
              }
            </select>
            <svg
              class="pointer-events-none absolute right-2 top-3 h-4 w-4 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path></svg
            >
          </div>

          <!-- Card Type Filter -->
          <div class="relative">
            <select
              id="cardTypeFilter"
              class="appearance-none rounded-lg border border-gray-200 bg-gray-50 px-4 py-2 pr-8 text-gray-700 focus:border-indigo-500 focus:bg-white focus:outline-none"
            >
              <option value="">所有形式</option>
              <option value="virtual">仅虚拟卡</option>
              <option value="physical">仅实体卡</option>
              <option value="both">虚拟+实体</option>
            </select>
            <svg
              class="pointer-events-none absolute right-2 top-3 h-4 w-4 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path></svg
            >
          </div>

          <!-- Reset Button -->
          <button
            id="resetFilters"
            class="rounded-lg bg-gray-200 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-300"
            >重置筛选</button
          >
        </div>

        <div class="mt-4 text-center">
          <span class="text-sm text-gray-600"
            >共找到 <span id="resultsCount" class="font-semibold text-indigo-600"
              >{allCards.length}</span
            > 张卡片</span
          >
        </div>
      </div>
    </section>

    <!-- Card Grid -->
    <section class="px-6 py-16 lg:px-8">
      <div class="mx-auto max-w-7xl">
        <div id="cardsGrid" class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {
            allCards.map((card) => (
              <div
                class="card-item group overflow-hidden rounded-2xl bg-white shadow-lg transition-all duration-300 hover:shadow-2xl"
                data-network={card.data.network}
                data-card-type={card.data.cardType}
                data-name={card.data.name.toLowerCase()}
                data-issuer={card.data.issuer.toLowerCase()}
              >
                <div class="bg-gradient-to-br from-indigo-50 to-purple-50 p-6">
                  <div class="mb-4 flex items-start justify-between">
                    <div>
                      <h3 class="mb-2 text-xl font-bold text-gray-900">{card.data.name}</h3>
                      <p class="text-sm text-gray-600">{card.data.issuer}</p>
                    </div>
                    {card.data.featured && (
                      <span class="rounded-full bg-gradient-to-r from-yellow-400 to-orange-400 px-3 py-1 text-xs font-semibold text-white">
                        推荐
                      </span>
                    )}
                  </div>
                  <div class="flex gap-2">
                    {card.data.network && (
                      <span
                        class={`rounded-full px-3 py-1 text-xs font-medium ${
                          card.data.network === CARD_NETWORKS.VISA
                            ? 'bg-blue-100 text-blue-700'
                            : card.data.network === CARD_NETWORKS.MASTERCARD
                              ? 'bg-purple-100 text-purple-700'
                              : 'bg-gray-100 text-gray-700'
                        }`}
                      >
                        {card.data.network.toUpperCase()}
                      </span>
                    )}
                    {(card.data.cardType === 'virtual' || card.data.cardType === 'both') && (
                      <span class="rounded-full bg-green-100 px-3 py-1 text-xs font-medium text-green-700">
                        虚拟卡
                      </span>
                    )}
                    {(card.data.cardType === 'physical' || card.data.cardType === 'both') && (
                      <span class="rounded-full bg-orange-100 px-3 py-1 text-xs font-medium text-orange-700">
                        实体卡
                      </span>
                    )}
                  </div>
                </div>
                <div class="p-6">
                  <p class="mb-4 line-clamp-2 text-sm text-gray-600">{card.data.description}</p>
                  <div class="mb-6 space-y-3">
                    <div class="flex items-center justify-between text-sm">
                      <span class="text-gray-500">交易费用</span>
                      <span class="font-semibold text-gray-900">
                        {card.data.transactionFee || 'N/A'}
                      </span>
                    </div>
                    <div class="flex items-center justify-between text-sm">
                      <span class="text-gray-500">年费</span>
                      <span class="font-semibold text-gray-900">
                        {card.data.annualFee ? '有' : '免费'}
                      </span>
                    </div>
                  </div>
                  <a
                    href={`/cards/${card.slug}`}
                    class="block w-full rounded-xl bg-gradient-to-r from-indigo-600 to-purple-600 py-3 text-center font-semibold text-white transition-all duration-300 hover:from-indigo-700 hover:to-purple-700 group-hover:scale-105"
                  >
                    查看详情
                  </a>
                </div>
              </div>
            ))
          }
        </div>
        <div id="noResults" class="hidden py-12 text-center">
          <svg
            class="mx-auto mb-4 h-16 w-16 text-gray-300"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path></svg
          >
          <p class="text-lg text-gray-500">没有找到符合条件的卡片</p>
          <button
            id="resetFromEmpty"
            class="mt-4 rounded-lg bg-indigo-600 px-6 py-2 text-white transition-colors hover:bg-indigo-700"
            >重置筛选条件</button
          >
        </div>
      </div>
    </section>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const searchInput = document.getElementById('searchInput');
      const networkFilter = document.getElementById('networkFilter');
      const cardTypeFilter = document.getElementById('cardTypeFilter');
      const resetButton = document.getElementById('resetFilters');
      const resetFromEmptyButton = document.getElementById('resetFromEmpty');
      const cardsGrid = document.getElementById('cardsGrid');
      const resultsCount = document.getElementById('resultsCount');
      const noResults = document.getElementById('noResults');

      const allCardElements = Array.from(document.querySelectorAll('.card-item'));

      function filterAndSortCards() {
        const searchTerm = searchInput.value.toLowerCase();
        const network = networkFilter.value;
        const cardType = cardTypeFilter.value;

        const filteredCards = allCardElements.filter((cardEl) => {
          if (
            searchTerm &&
            !cardEl.dataset.name.includes(searchTerm) &&
            !cardEl.dataset.issuer.includes(searchTerm)
          ) {
            return false;
          }
          if (network && cardEl.dataset.network !== network) {
            return false;
          }
          if (cardType) {
            if (
              cardType === 'virtual' &&
              cardEl.dataset.cardType !== 'virtual' &&
              cardEl.dataset.cardType !== 'both'
            )
              return false;
            if (
              cardType === 'physical' &&
              cardEl.dataset.cardType !== 'physical' &&
              cardEl.dataset.cardType !== 'both'
            )
              return false;
            if (cardType === 'both' && cardEl.dataset.cardType !== 'both') return false;
          }
          return true;
        });

        // Hide all, then show filtered
        allCardElements.forEach((cardEl) => (cardEl.style.display = 'none'));
        filteredCards.forEach((cardEl) => (cardEl.style.display = 'block'));

        resultsCount.textContent = filteredCards.length;

        if (filteredCards.length === 0) {
          cardsGrid.style.display = 'none';
          noResults.classList.remove('hidden');
        } else {
          cardsGrid.style.display = 'grid';
          noResults.classList.add('hidden');
        }
      }

      function resetAllFilters() {
        searchInput.value = '';
        networkFilter.value = '';
        cardTypeFilter.value = '';
        filterAndSortCards();
      }

      [searchInput, networkFilter, cardTypeFilter].forEach((el) =>
        el.addEventListener('input', filterAndSortCards)
      );
      [resetButton, resetFromEmptyButton].forEach((el) =>
        el.addEventListener('click', resetAllFilters)
      );

      filterAndSortCards(); // Initial run
    });
  </script>
</Layout>
