---
// src/pages/cards/index.astro
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

let allCards = [];
try {
  allCards = await getCollection('cards');
} catch (error) {
  console.error('Error loading cards:', error);
  allCards = []; // Fallback to empty array on error
}

// Initial sort: by publish date
allCards = allCards.sort((a, b) => 
  new Date(b.data.publishDate || 0).getTime() -
  new Date(a.data.publishDate || 0).getTime()
);
---

<Layout title="U卡评测列表 - 专业的数字货币U卡评测">
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
    <!-- Hero Section -->
    <section class="relative overflow-hidden bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-700 py-20">
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.1),transparent_70%)]"></div>
      <div class="absolute top-0 left-0 w-96 h-96 bg-white/10 rounded-full blur-3xl -translate-x-48 -translate-y-48"></div>
      
      <div class="relative max-w-7xl mx-auto px-6 lg:px-8 text-center">
        <div class="inline-flex items-center px-4 py-2 rounded-full bg-white/20 backdrop-blur-sm border border-white/30 text-white/90 text-sm font-medium mb-8">
          <span class="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse"></span>
          实时更新 · 专业评测
        </div>
        
        <h1 class="text-5xl lg:text-6xl font-bold text-white mb-6">
          全球顶级 <span class="text-transparent bg-clip-text bg-gradient-to-r from-yellow-300 to-pink-300">数字货币U卡</span>
        </h1>
        
        <p class="text-xl text-white/90 mb-8 max-w-3xl mx-auto">
          深度评测市场主流数字货币卡片，帮您找到最适合的加密支付方案
        </p>
        
        <div class="flex flex-wrap justify-center gap-4">
          <div class="bg-white/20 backdrop-blur-sm rounded-full px-6 py-3 border border-white/30">
            <span class="text-white font-semibold">{allCards.length}+ 卡片评测</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Filters and Search Bar -->
    <section class="py-8 bg-white shadow-sm sticky top-0 z-40">
      <div class="max-w-7xl mx-auto px-6 lg:px-8">
        <div class="mb-6">
          <div class="relative max-w-md mx-auto">
            <input type="text" id="searchInput" placeholder="搜索卡片名称或发行商..." class="w-full px-4 py-3 pl-12 pr-4 text-gray-700 bg-gray-50 border border-gray-200 rounded-full focus:outline-none focus:border-indigo-500 focus:bg-white" />
            <svg class="absolute left-4 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/></svg>
          </div>
        </div>

        <div class="flex flex-wrap gap-4 justify-center">
          <!-- Network Filter -->
          <div class="relative">
            <select id="networkFilter" class="appearance-none bg-gray-50 border border-gray-200 text-gray-700 py-2 px-4 pr-8 rounded-lg focus:outline-none focus:bg-white focus:border-indigo-500">
              <option value="">所有网络</option>
              <option value="visa">Visa</option>
              <option value="mastercard">Mastercard</option>
              <option value="unionpay">UnionPay</option>
            </select>
            <svg class="absolute right-2 top-3 w-4 h-4 text-gray-400 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/></svg>
          </div>

          <!-- Card Type Filter -->
          <div class="relative">
            <select id="cardTypeFilter" class="appearance-none bg-gray-50 border border-gray-200 text-gray-700 py-2 px-4 pr-8 rounded-lg focus:outline-none focus:bg-white focus:border-indigo-500">
              <option value="">所有形式</option>
              <option value="virtual">仅虚拟卡</option>
              <option value="physical">仅实体卡</option>
              <option value="both">虚拟+实体</option>
            </select>
            <svg class="absolute right-2 top-3 w-4 h-4 text-gray-400 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/></svg>
          </div>

          <!-- Reset Button -->
          <button id="resetFilters" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">重置筛选</button>
        </div>

        <div class="mt-4 text-center">
          <span class="text-sm text-gray-600">共找到 <span id="resultsCount" class="font-semibold text-indigo-600">{allCards.length}</span> 张卡片</span>
        </div>
      </div>
    </section>

    <!-- Card Grid -->
    <section class="py-16 px-6 lg:px-8">
      <div class="max-w-7xl mx-auto">
        <div id="cardsGrid" class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {allCards.map((card) => (
            <div class="card-item bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden group"
                 data-network={card.data.network}
                 data-card-type={card.data.cardType}
                 data-name={card.data.name.toLowerCase()}
                 data-issuer={card.data.issuer.toLowerCase()}>
              <div class="p-6 bg-gradient-to-br from-indigo-50 to-purple-50">
                <div class="flex items-start justify-between mb-4">
                  <div>
                    <h3 class="text-xl font-bold text-gray-900 mb-2">{card.data.name}</h3>
                    <p class="text-sm text-gray-600">{card.data.issuer}</p>
                  </div>
                  {card.data.featured && <span class="px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs font-semibold rounded-full">推荐</span>}
                </div>
                <div class="flex gap-2">
                  <span class={`px-3 py-1 text-xs font-medium rounded-full ${
                    card.data.network === 'visa' ? 'bg-blue-100 text-blue-700' :
                    card.data.network === 'mastercard' ? 'bg-purple-100 text-purple-700' :
                    'bg-gray-100 text-gray-700'
                  }`}>
                    {card.data.network.toUpperCase()}
                  </span>
                  {(card.data.cardType === 'virtual' || card.data.cardType === 'both') && <span class="px-3 py-1 bg-green-100 text-green-700 text-xs font-medium rounded-full">虚拟卡</span>}
                  {(card.data.cardType === 'physical' || card.data.cardType === 'both') && <span class="px-3 py-1 bg-orange-100 text-orange-700 text-xs font-medium rounded-full">实体卡</span>}
                </div>
              </div>
              <div class="p-6">
                <p class="text-gray-600 text-sm mb-4 line-clamp-2">{card.data.description}</p>
                <div class="space-y-3 mb-6">
                  <div class="flex items-center justify-between text-sm">
                    <span class="text-gray-500">交易费用</span>
                    <span class="font-semibold text-gray-900">{card.data.transactionFee || 'N/A'}</span>
                  </div>
                  <div class="flex items-center justify-between text-sm">
                    <span class="text-gray-500">年费</span>
                    <span class="font-semibold text-gray-900">{card.data.annualFee ? '有' : '免费'}</span>
                  </div>
                </div>
                <a href={`/cards/${card.slug}`} class="block w-full py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white text-center font-semibold rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 group-hover:scale-105">
                  查看详情
                </a>
              </div>
            </div>
          ))}
        </div>
        <div id="noResults" class="hidden text-center py-12">
          <svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
          <p class="text-gray-500 text-lg">没有找到符合条件的卡片</p>
          <button id="resetFromEmpty" class="mt-4 px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">重置筛选条件</button>
        </div>
      </div>
    </section>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('searchInput');
      const networkFilter = document.getElementById('networkFilter');
      const cardTypeFilter = document.getElementById('cardTypeFilter');
      const resetButton = document.getElementById('resetFilters');
      const resetFromEmptyButton = document.getElementById('resetFromEmpty');
      const cardsGrid = document.getElementById('cardsGrid');
      const resultsCount = document.getElementById('resultsCount');
      const noResults = document.getElementById('noResults');
      
      const allCardElements = Array.from(document.querySelectorAll('.card-item'));
      
      function filterAndSortCards() {
        const searchTerm = searchInput.value.toLowerCase();
        const network = networkFilter.value;
        const cardType = cardTypeFilter.value;
        
        const filteredCards = allCardElements.filter(cardEl => {
          if (searchTerm && !cardEl.dataset.name.includes(searchTerm) && !cardEl.dataset.issuer.includes(searchTerm)) {
            return false;
          }
          if (network && cardEl.dataset.network !== network) {
            return false;
          }
          if (cardType) {
            if (cardType === 'virtual' && cardEl.dataset.cardType !== 'virtual' && cardEl.dataset.cardType !== 'both') return false;
            if (cardType === 'physical' && cardEl.dataset.cardType !== 'physical' && cardEl.dataset.cardType !== 'both') return false;
            if (cardType === 'both' && cardEl.dataset.cardType !== 'both') return false;
          }
          return true;
        });
        
        // Hide all, then show filtered
        allCardElements.forEach(cardEl => cardEl.style.display = 'none');
        filteredCards.forEach(cardEl => cardEl.style.display = 'block');
        
        resultsCount.textContent = filteredCards.length;
        
        if (filteredCards.length === 0) {
          cardsGrid.style.display = 'none';
          noResults.classList.remove('hidden');
        } else {
          cardsGrid.style.display = 'grid';
          noResults.classList.add('hidden');
        }
      }
      
      function resetAllFilters() {
        searchInput.value = '';
        networkFilter.value = '';
        cardTypeFilter.value = '';
        filterAndSortCards();
      }
      
      [searchInput, networkFilter, cardTypeFilter].forEach(el => el.addEventListener('input', filterAndSortCards));
      [resetButton, resetFromEmptyButton].forEach(el => el.addEventListener('click', resetAllFilters));
      
      filterAndSortCards(); // Initial run
    });
  </script>
</Layout>
