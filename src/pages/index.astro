---
// src/pages/index.astro (表格部分优化版本)
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// 服务端预加载数据，减少客户端请求
let allCards = [];
try {
  allCards = await getCollection('cards');
  allCards = allCards.sort((a, b) => (b.data.rating || 0) - (a.data.rating || 0));
} catch (error) {
  console.warn('Cards collection not found:', error.message);
  allCards = [];
}

// 预加载前15条数据用于初始显示
const initialCards = allCards.slice(0, 15);
---

<Layout title="数字货币U卡评测与推荐">
  <!-- 省略其他部分，只显示表格相关代码 -->

  <!-- U卡评测表格部分 -->
  <section id="cards" class="py-16 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <!-- 标题部分保持不变 -->

      <!-- 筛选器部分保持不变 -->

      <!-- 优化后的表格容器 -->
      <div class="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="border-b border-gray-200">
                <th class="px-6 py-4 text-left text-sm font-medium text-gray-700">
                  # 卡片信息
                </th>
                <th class="px-4 py-4 text-center text-sm font-medium text-gray-700 min-w-[100px]">
                  虚拟卡
                </th>
                <th class="px-4 py-4 text-center text-sm font-medium text-gray-700 min-w-[100px]">
                  实体卡
                </th>
                <th class="px-4 py-4 text-center text-sm font-medium text-gray-700 min-w-[100px]">
                  手续费
                </th>
                <th class="px-4 py-4 text-center text-sm font-medium text-gray-700 min-w-[120px]">
                  年/月费
                </th>
                <th class="px-4 py-4 text-center text-sm font-medium text-gray-700 min-w-[100px]">
                  讨论
                </th>
                <th class="px-4 py-4 text-center text-sm font-medium text-gray-700 min-w-[100px]">
                  申请
                </th>
              </tr>
            </thead>
            <tbody id="card-table-body" class="divide-y divide-gray-100">
              <!-- 服务端渲染初始数据 -->
              {initialCards.map((card, index) => (
                <tr class="hover:bg-gray-50/50 transition-colors" data-server-rendered="true">
                  <td class="py-4 px-6">
                    <div class="flex items-center gap-3">
                      <div class="flex items-center gap-3">
                        <span class="text-gray-500 font-medium text-sm">{index + 1}</span>
                        <div class={`w-10 h-10 ${['bg-purple-500', 'bg-pink-500', 'bg-blue-500', 'bg-green-500', 'bg-orange-500'][index % 5]} rounded-lg flex items-center justify-center`}>
                          <span class="text-white font-bold text-sm">
                            {card.data.name.substring(0, 2).toUpperCase()}
                          </span>
                        </div>
                      </div>
                      <div class="flex-1">
                        <div class="flex items-center gap-2">
                          <a href={`/cards/${card.slug}`} class="font-medium text-gray-900 hover:text-blue-600 transition-colors">
                            {card.data.name}
                          </a>
                        </div>
                        <p class="text-xs text-gray-500 line-clamp-1 mt-0.5">
                          {card.data.shortDescription || card.data.description || ''}
                        </p>
                      </div>
                    </div>
                  </td>
                  <td class="py-4 px-4 text-center">
                    {card.data.isVirtual ? (
                      <div class="flex flex-col items-center">
                        <svg class="w-5 h-5 text-green-500 mb-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        {card.data.virtualCardPrice && card.data.virtualCardPrice > 0 && (
                          <span class="text-xs text-gray-600">${card.data.virtualCardPrice}</span>
                        )}
                      </div>
                    ) : (
                      <svg class="w-5 h-5 text-gray-300 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                      </svg>
                    )}
                  </td>
                  <td class="py-4 px-4 text-center">
                    {card.data.isPhysical ? (
                      <div class="flex flex-col items-center">
                        <svg class="w-5 h-5 text-green-500 mb-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        {card.data.physicalCardPrice && card.data.physicalCardPrice > 0 && (
                          <span class="text-xs text-gray-600">${card.data.physicalCardPrice}</span>
                        )}
                      </div>
                    ) : (
                      <svg class="w-5 h-5 text-gray-300 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                      </svg>
                    )}
                  </td>
                  <td class="py-4 px-4 text-center">
                    <span class="text-sm font-medium text-gray-700">
                      {/* 手续费计算逻辑 */}
                      {(() => {
                        const fees = [card.data.depositFee, card.data.transactionFee, card.data.foreignExchangeFee];
                        let total = 0;
                        let hasNumericFee = false;

                        for (const fee of fees) {
                          if (typeof fee === 'string' && isNaN(parseFloat(fee))) {
                            if (fee.toLowerCase() !== 'free' && fee !== '免费') {
                              return fee;
                            }
                          }
                          if (typeof fee === 'string' || typeof fee === 'number') {
                            const cleanValue = fee.toString().replace(/[^0-9.]/g, '');
                            const parsed = parseFloat(cleanValue);
                            if (!isNaN(parsed)) {
                              total += parsed;
                              hasNumericFee = true;
                            }
                          }
                        }

                        return hasNumericFee ? `${total.toFixed(1)}%` : '免费';
                      })()}
                    </span>
                  </td>
                  <td class="py-4 px-4 text-center">
                    <span class={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                      card.data.annualFee ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'
                    }`}>
                      {card.data.annualFee ? '收费' : '免费'}
                    </span>
                  </td>
                  <td class="py-4 px-4 text-center" data-slug-for-comments={card.slug}>
                    <div class="w-9 h-9 rounded-full bg-gray-100 animate-pulse"></div>
                  </td>
                  <td class="py-4 px-4 text-center">
                    <button onclick={`window.location.href='/cards/${card.slug}'`}
                            class="inline-flex items-center justify-center gap-1 px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white text-xs font-medium rounded-lg transition-colors whitespace-nowrap">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      立即申请
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <!-- 加载指示器 -->
      <div id="loading-indicator" class="hidden text-center py-8">
        <div class="inline-flex items-center gap-3">
          <svg class="w-5 h-5 text-gray-400 animate-spin" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="text-sm text-gray-500">正在加载更多卡片...</span>
        </div>
      </div>

      <div id="end-indicator" class="hidden text-center py-8">
        <div class="text-sm text-gray-500">
          <svg class="w-5 h-5 text-gray-400 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          所有卡片已加载完毕
        </div>
      </div>
    </div>
  </section>

  <!-- 优化后的JavaScript -->
  <script define:vars={{ allCards, initialCards }}>
    // 性能优化配置
    const ITEMS_PER_PAGE = 15; // 增加到15条
    const PRELOAD_MARGIN = '300px'; // 增加预加载距离
    const USE_VIRTUAL_SCROLL = false; // 可选的虚拟滚动

    // 状态管理
    let currentDisplayCount = initialCards.length; // 从服务端渲染的数量开始
    let filteredCards = [...allCards];
    let isLoading = false;
    let hasMoreData = allCards.length > initialCards.length;

    // 筛选状态
    let filters = {
      cardType: '',
      cardForm: '',
      annualFee: '',
      search: ''
    };

    // 使用DocumentFragment优化DOM操作
    function createTableRow(card, index) {
      const tr = document.createElement('tr');
      tr.className = 'hover:bg-gray-50/50 transition-colors opacity-0';

      // 创建表格单元格
      const cells = [
        createInfoCell(card, index),
        createVirtualCardCell(card),
        createPhysicalCardCell(card),
        createFeeCell(card),
        createAnnualFeeCell(card),
        createDiscussionCell(card),
        createActionCell(card)
      ];

      cells.forEach(cell => tr.appendChild(cell));

      // 使用requestAnimationFrame优化动画
      requestAnimationFrame(() => {
        tr.classList.remove('opacity-0');
        tr.classList.add('fade-in-row');
      });

      return tr;
    }

    // 创建信息单元格
    function createInfoCell(card, index) {
      const td = document.createElement('td');
      td.className = 'py-4 px-6';

      const rank = index + 1;
      const logoText = card.data.name.substring(0, 2).toUpperCase();
      const logoBgColor = ['bg-purple-500', 'bg-pink-500', 'bg-blue-500', 'bg-green-500', 'bg-orange-500'][index % 5];

      td.innerHTML = `
        <div class="flex items-center gap-3">
          <div class="flex items-center gap-3">
            <span class="text-gray-500 font-medium text-sm">${rank}</span>
            <div class="w-10 h-10 ${logoBgColor} rounded-lg flex items-center justify-center">
              <span class="text-white font-bold text-sm">${logoText}</span>
            </div>
          </div>
          <div class="flex-1">
            <div class="flex items-center gap-2">
              <a href="/cards/${card.slug}" class="font-medium text-gray-900 hover:text-blue-600 transition-colors">
                ${card.data.name}
              </a>
            </div>
            <p class="text-xs text-gray-500 line-clamp-1 mt-0.5">${card.data.shortDescription || card.data.description || ''}</p>
          </div>
        </div>
      `;

      return td;
    }

    // 其他单元格创建函数类似...
    function createVirtualCardCell(card) {
      const td = document.createElement('td');
      td.className = 'py-4 px-4 text-center';
      // ... 虚拟卡逻辑
      return td;
    }

    function createPhysicalCardCell(card) {
      const td = document.createElement('td');
      td.className = 'py-4 px-4 text-center';
      // ... 实体卡逻辑
      return td;
    }

    function createFeeCell(card) {
      const td = document.createElement('td');
      td.className = 'py-4 px-4 text-center';
      td.innerHTML = `<span class="text-sm font-medium text-gray-700">${calculateTotalFees(card)}</span>`;
      return td;
    }

    function createAnnualFeeCell(card) {
      const td = document.createElement('td');
      td.className = 'py-4 px-4 text-center';
      const feeClass = card.data.annualFee ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800';
      const feeText = card.data.annualFee ? '收费' : '免费';
      td.innerHTML = `<span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${feeClass}">${feeText}</span>`;
      return td;
    }

    function createDiscussionCell(card, commentCount = -1) { // -1 as initial state
      const td = document.createElement('td');
      td.className = 'py-4 px-4 text-center';
      td.setAttribute('data-slug-for-comments', card.slug);

      if (commentCount > 0) {
        td.innerHTML = `<a href="/cards/${card.slug}#giscus-comments"
                          class="inline-flex items-center justify-center gap-1.5 px-3 py-1.5 text-xs font-medium text-indigo-700 bg-indigo-50 rounded-full hover:bg-indigo-100 transition-all duration-200 group"
                          title="${commentCount} 条讨论">
                          <svg class="w-4 h-4 text-indigo-500 group-hover:scale-110 transition-transform" fill="currentColor" viewBox="0 0 20 20"><path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z"/><path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z"/></svg>
                          <span class="font-semibold">${commentCount}</span>
                        </a>`;
      } else if (commentCount === 0) {
        td.innerHTML = `<a href="/cards/${card.slug}#giscus-comments"
                          class="inline-flex items-center justify-center w-9 h-9 rounded-full bg-gray-50 hover:bg-indigo-50 transition-all duration-200 group"
                          title="参与讨论">
                          <svg class="w-5 h-5 text-gray-400 group-hover:text-indigo-500 group-hover:scale-110 transition-all duration-200" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z"/></svg>
                        </a>`;
      } else {
        // Initial loading state (or if fetch fails)
        td.innerHTML = `<div class="w-9 h-9 rounded-full bg-gray-100 animate-pulse"></div>`
      }
      return td;
    }

    function createActionCell(card) {
      const td = document.createElement('td');
      td.className = 'py-4 px-4 text-center';
      td.innerHTML = `
        <button onclick="window.location.href='/cards/${card.slug}'"
                class="inline-flex items-center justify-center gap-1 px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white text-xs font-medium rounded-lg transition-colors whitespace-nowrap">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          立即申请
        </button>
      `;
      return td;
    }

    // 计算总手续费
    function calculateTotalFees(card) {
      const fees = [card.data.depositFee, card.data.transactionFee, card.data.foreignExchangeFee];
      let total = 0;
      let hasNumericFee = false;
      
      for (const fee of fees) {
        if (typeof fee === 'string' && isNaN(parseFloat(fee))) {
          if (fee.toLowerCase() !== 'free' && fee !== '免费') {
            return fee;
          }
        }

        if (typeof fee === 'string' || typeof fee === 'number') {
          const cleanValue = fee.toString().replace(/[^0-9.]/g, '');
          const parsed = parseFloat(cleanValue);
          if (!isNaN(parsed)) {
            total += parsed;
            hasNumericFee = true;
          }
        }
      }

      return hasNumericFee ? `${total.toFixed(1)}%` : '免费';
    }

    // 优化后的批量添加行
    function appendRows(cards, startIndex) {
      const tableBody = document.getElementById('card-table-body');
      if (!tableBody) return;

      // 使用DocumentFragment批量插入
      const fragment = document.createDocumentFragment();

      cards.forEach((card, index) => {
        const globalIndex = startIndex + index;
        const row = createTableRow(card, globalIndex);
        fragment.appendChild(row);
      });

      // 一次性插入所有行
      tableBody.appendChild(fragment);
    }

    // 优化后的加载更多函数（移除了setTimeout）
    function loadMore() {
      if (isLoading || !hasMoreData) return;

      isLoading = true;
      showLoadingIndicator();

      // 使用requestAnimationFrame代替setTimeout
      requestAnimationFrame(() => {
        const startIndex = currentDisplayCount;
        const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, filteredCards.length);
        const nextBatch = filteredCards.slice(startIndex, endIndex);

        if (nextBatch.length === 0) {
          hasMoreData = false;
          hideLoadingIndicator();
          showEndIndicator();
        } else {
          appendRows(nextBatch, startIndex);
          currentDisplayCount = endIndex;

          if (currentDisplayCount >= filteredCards.length) {
            hasMoreData = false;
            hideLoadingIndicator();
            showEndIndicator();
          }
        }

        updateFilteredCount();
        isLoading = false;

        // 预加载下一批
        preloadNextBatch();
      });
    }

    // 预加载下一批数据
    function preloadNextBatch() {
      if (!hasMoreData) return;

      const nextStartIndex = currentDisplayCount;
      const nextEndIndex = Math.min(nextStartIndex + ITEMS_PER_PAGE, filteredCards.length);

      if (nextEndIndex > nextStartIndex) {
        // 预处理下一批数据（可以在这里预创建DOM元素）
        const nextBatch = filteredCards.slice(nextStartIndex, nextEndIndex);
        // 存储预处理的数据供后续使用
        window.__preloadedBatch = nextBatch;
      }
    }

    // 优化后的无限滚动设置
    function setupInfiniteScroll() {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && !isLoading && hasMoreData) {
              // 立即加载，无延迟
              requestAnimationFrame(() => {
                loadMore();
              });
            }
          });
        },
        {
          root: null,
          rootMargin: PRELOAD_MARGIN, // 增加预加载距离
          threshold: 0
        }
      );

      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) {
        observer.observe(loadingIndicator);
      }
    }

    // 显示/隐藏指示器函数
    function showLoadingIndicator() {
      const indicator = document.getElementById('loading-indicator');
      if (indicator) indicator.classList.remove('hidden');
    }

    function hideLoadingIndicator() {
      const indicator = document.getElementById('loading-indicator');
      if (indicator) indicator.classList.add('hidden');
    }

    function showEndIndicator() {
      const indicator = document.getElementById('end-indicator');
      if (indicator && !hasMoreData && currentDisplayCount > 0) {
        indicator.classList.remove('hidden');
      }
    }

    // 筛选功能
    function applyFilters() {
      filteredCards = allCards.filter(card => {
        // 筛选逻辑保持不变
        if (filters.cardType && card.data.cardType !== filters.cardType) return false;
        if (filters.cardForm) {
          if (filters.cardForm === 'virtual' && !card.data.isVirtual) return false;
          if (filters.cardForm === 'physical' && !card.data.isPhysical) return false;
          if (filters.cardForm === 'both' && (!card.data.isVirtual || !card.data.isPhysical)) return false;
        }
        if (filters.annualFee) {
          if (filters.annualFee === 'free' && card.data.annualFee !== false) return false;
          if (filters.annualFee === 'paid' && card.data.annualFee === false) return false;
        }
        if (filters.search) {
          const searchTerm = filters.search.toLowerCase();
          const cardName = card.data.name.toLowerCase();
          const cardDescription = (card.data.shortDescription || card.data.description || '').toLowerCase();
          if (!cardName.includes(searchTerm) && !cardDescription.includes(searchTerm)) return false;
        }
        return true;
      });

      // 清空表格并重新加载
      const tableBody = document.getElementById('card-table-body');
      if (tableBody) {
        // 保留服务端渲染的行或清空
        const serverRenderedRows = tableBody.querySelectorAll('[data-server-rendered="true"]');
        serverRenderedRows.forEach(row => row.remove());
        tableBody.innerHTML = '';
      }

      currentDisplayCount = 0;
      hasMoreData = filteredCards.length > 0;

      updateFilteredCount();
      loadMore();
    }

    function updateFilteredCount() {
      const countEl = document.getElementById('filtered-count');
      const displayedCountEl = document.getElementById('displayed-count');

      if (countEl) countEl.textContent = filteredCards.length;
      if (displayedCountEl) displayedCountEl.textContent = currentDisplayCount;
    }

    // 初始化
    document.addEventListener('DOMContentLoaded', function() {
      // Function to update comment cells
      const updateCommentCells = (commentData) => {
        const cells = document.querySelectorAll('[data-slug-for-comments]');
        cells.forEach(cell => {
          const slug = cell.dataset.slugForComments;
          if (slug in commentData) {
            const count = commentData[slug];
            const card = { slug: slug }; // Dummy card object for the function
            const newCell = createDiscussionCell(card, count);
            cell.parentNode.replaceChild(newCell, cell);
          }
        });
      };

      // Fetch comment counts asynchronously
      fetch('/api/comments.json')
        .then(res => res.ok ? res.json() : {})
        .then(commentData => {
          updateCommentCells(commentData);
        })
        .catch(err => console.error("Failed to fetch comment counts:", err));

      // 初始化事件监听器
      const cardTypeFilter = document.getElementById('card-type-filter');
      const cardFormFilter = document.getElementById('card-form-filter');
      const annualFeeFilter = document.getElementById('annual-fee-filter');
      const searchInput = document.getElementById('search-input');
      const searchBtn = document.getElementById('search-btn');
      const resetBtn = document.getElementById('reset-filters');

      // 绑定事件（使用防抖优化）
      let searchTimeout;

      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            filters.search = e.target.value.trim();
            applyFilters();
          }, 300); // 300ms防抖
        });
      }

      // 其他筛选器事件绑定
      [cardTypeFilter, cardFormFilter, annualFeeFilter].forEach(filter => {
        if (filter) {
          filter.addEventListener('change', (e) => {
            const filterName = e.target.id.replace('-filter', '').replace('card-', '');
            filters[filterName === 'type' ? 'cardType' : filterName === 'form' ? 'cardForm' : 'annualFee'] = e.target.value;
            applyFilters();
          });
        }
      });

      // 设置无限滚动
      setupInfiniteScroll();

      // 更新初始计数
      updateFilteredCount();

      // 如果有更多数据，设置加载
      if (hasMoreData) {
        // 预加载下一批
        preloadNextBatch();
      }
    });
  </script>

  <!-- 优化的CSS动画 -->
  <style>
    /* 使用CSS动画而非JavaScript控制 */
    @keyframes fadeInRow {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-in-row {
      animation: fadeInRow 0.3s ease-out forwards;
    }

    /* 使用will-change优化性能 */
    tbody tr {
      will-change: transform, opacity;
    }

    /* 动画完成后移除will-change */
    tbody tr:not(.fade-in-row) {
      will-change: auto;
    }

    /* 优化滚动性能 */
    .overflow-x-auto {
      -webkit-overflow-scrolling: touch;
      scroll-behavior: smooth;
    }

    /* 减少重绘和重排 */
    .table-container {
      contain: layout style paint;
    }

    /* 优化表格渲染 */
    table {
      table-layout: fixed;
    }

    /* 预加载动画优化 */
    #loading-indicator {
      will-change: opacity;
    }
  </style>
</Layout>
