---
// src/pages/index.astro 或 src/components/OptimizedCardTable.astro
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

// 获取所有卡片数据
const allCards = await getCollection('cards');

// 数据预处理和优化
const processedCards = allCards
  .filter(card => card.data.status !== 'discontinued') // 过滤掉已停用的卡片
  .map(card => ({
    slug: card.slug,
    name: card.data.name,
    issuer: card.data.issuer,
    description: card.data.shortDescription || card.data.description,
    // 使用新的命名方式
    providesVirtualCard: card.data.providesVirtualCard || card.data.hasVirtual || card.data.isVirtual || false,
    providesPhysicalCard: card.data.providesPhysicalCard || card.data.hasPhysical || card.data.isPhysical || false,
    // 虚拟卡数据
    virtualPrice: card.data.virtualPrice ?? card.data.virtualCardPrice ?? 0,
    virtualNetwork: card.data.virtualNetwork || card.data.network,
    virtualTransactionFee: card.data.virtualTransactionFee ?? card.data.transactionFee ?? 0,
    // 实体卡数据
    physicalPrice: card.data.physicalPrice ?? card.data.physicalCardPrice ?? 0,
    physicalNetwork: card.data.physicalNetwork || card.data.network,
    physicalTransactionFee: card.data.physicalTransactionFee ?? card.data.transactionFee ?? 0,
    // 其他
    featured: card.data.featured || false,
    affiliateLink: card.data.affiliateLink,
    tags: card.data.tags || []
  }))
  .sort((a, b) => {
    // 优先显示推荐的卡片
    if (a.featured && !b.featured) return -1;
    if (!a.featured && b.featured) return 1;
    return a.name.localeCompare(b.name);
  });

// 预计算统计数据
const stats = {
  total: processedCards.length,
  virtual: processedCards.filter(c => c.providesVirtualCard).length,
  physical: processedCards.filter(c => c.providesPhysicalCard).length,
  both: processedCards.filter(c => c.providesVirtualCard && c.providesPhysicalCard).length
};
---

<Layout title="U卡评测 - 最全面的数字货币卡片对比平台">
  <div class="container mx-auto px-4 py-8">
    <!-- 统计卡片 -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
      <div class="bg-white rounded-lg shadow-sm p-4">
        <div class="text-2xl font-bold text-indigo-600">{stats.total}</div>
        <div class="text-sm text-gray-600">总卡片数</div>
      </div>
      <div class="bg-white rounded-lg shadow-sm p-4">
        <div class="text-2xl font-bold text-green-600">{stats.virtual}</div>
        <div class="text-sm text-gray-600">虚拟卡</div>
      </div>
      <div class="bg-white rounded-lg shadow-sm p-4">
        <div class="text-2xl font-bold text-blue-600">{stats.physical}</div>
        <div class="text-sm text-gray-600">实体卡</div>
      </div>
      <div class="bg-white rounded-lg shadow-sm p-4">
        <div class="text-2xl font-bold text-purple-600">{stats.both}</div>
        <div class="text-sm text-gray-600">双卡类型</div>
      </div>
    </div>

    <!-- 筛选控制区 -->
    <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
      <div class="flex flex-wrap gap-4 items-center">
        <!-- 快速筛选 -->
        <div class="flex gap-2">
          <button data-filter="all" class="filter-btn px-4 py-2 rounded-lg bg-indigo-600 text-white">
            全部
          </button>
          <button data-filter="virtual" class="filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300">
            仅虚拟卡
          </button>
          <button data-filter="physical" class="filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300">
            仅实体卡
          </button>
          <button data-filter="both" class="filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300">
            双卡类型
          </button>
        </div>

        <!-- 搜索框 -->
        <input
          type="text"
          id="searchInput"
          placeholder="搜索卡片名称或发行商..."
          class="px-4 py-2 border rounded-lg flex-1 max-w-xs">

        <!-- 显示数量控制 -->
        <select id="pageSize" class="px-4 py-2 border rounded-lg">
          <option value="10">显示 10 条</option>
          <option value="20" selected>显示 20 条</option>
          <option value="50">显示 50 条</option>
          <option value="100">显示 100 条</option>
        </select>
      </div>
    </div>

    <!-- 优化的表格 -->
    <div class="bg-white rounded-lg shadow-sm overflow-hidden">
      <div class="overflow-x-auto">
        <table class="w-full" id="cardsTable">
          <thead class="bg-gray-50 sticky top-0 z-10">
            <tr>
              <th class="px-6 py-3 text-left text-sm font-medium text-gray-700">
                # 卡片信息
              </th>
              <th class="px-4 py-3 text-center text-sm font-medium text-gray-700 w-32">
                虚拟卡
              </th>
              <th class="px-4 py-3 text-center text-sm font-medium text-gray-700 w-32">
                实体卡
              </th>
              <th class="px-4 py-3 text-center text-sm font-medium text-gray-700 w-28">
                手续费
              </th>
              <th class="px-4 py-3 text-center text-sm font-medium text-gray-700 w-24">
                操作
              </th>
            </tr>
          </thead>
          <tbody id="tableBody">
            <!-- 初始渲染前20条数据 -->
            {processedCards.slice(0, 20).map((card, index) => (
              <tr class="border-b hover:bg-gray-50 card-row"
                  data-virtual={card.providesVirtualCard}
                  data-physical={card.providesPhysicalCard}
                  data-name={card.name.toLowerCase()}
                  data-issuer={card.issuer.toLowerCase()}>
                <td class="px-6 py-4">
                  <div class="flex items-center gap-3">
                    <span class="text-gray-500 text-sm w-8">{index + 1}</span>
                    <div>
                      <div class="font-medium text-gray-900">
                        {card.featured && <span class="text-yellow-500 mr-1">⭐</span>}
                        {card.name}
                      </div>
                      <div class="text-sm text-gray-500">{card.issuer}</div>
                    </div>
                  </div>
                </td>
                <td class="px-4 py-4 text-center">
                  {card.providesVirtualCard ? (
                    <div>
                      <div class="text-green-600 font-medium">✓ 支持</div>
                      <div class="text-xs text-gray-500">
                        {card.virtualPrice === 0 ? '免费' : `$${card.virtualPrice}`}
                      </div>
                    </div>
                  ) : (
                    <div class="text-gray-400">-</div>
                  )}
                </td>
                <td class="px-4 py-4 text-center">
                  {card.providesPhysicalCard ? (
                    <div>
                      <div class="text-blue-600 font-medium">✓ 支持</div>
                      <div class="text-xs text-gray-500">
                        {card.physicalPrice === 0 ? '免费' : `$${card.physicalPrice}`}
                      </div>
                    </div>
                  ) : (
                    <div class="text-gray-400">-</div>
                  )}
                </td>
                <td class="px-4 py-4 text-center">
                  <div class="text-sm">
                    {card.virtualTransactionFee === 0 && card.physicalTransactionFee === 0 ? (
                      <span class="text-green-600 font-medium">免费</span>
                    ) : (
                      <span class="text-gray-700">
                        {Math.min(
                          card.virtualTransactionFee || 999,
                          card.physicalTransactionFee || 999
                        )}%
                      </span>
                    )}
                  </div>
                </td>
                <td class="px-4 py-4 text-center">
                  <a href={`/cards/${card.slug}`}
                     class="inline-flex items-center px-3 py-1 bg-indigo-600 text-white text-sm rounded hover:bg-indigo-700">
                    查看
                  </a>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <!-- 加载更多 -->
      <div id="loadMoreContainer" class="p-4 text-center border-t">
        <button id="loadMoreBtn" class="px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
          加载更多
        </button>
      </div>
    </div>
  </div>

  <!-- 优化的客户端脚本 -->
  <script define:vars={{ processedCards }}>
    // 性能优化：使用 requestIdleCallback 进行延迟渲染
    class OptimizedCardTable {
      constructor(cards) {
        this.allCards = cards;
        this.filteredCards = [...cards];
        this.displayedCount = 20;
        this.pageSize = 20;
        this.currentFilter = 'all';
        this.searchTerm = '';

        this.init();
      }

      init() {
        this.attachEventListeners();
        this.updateStats();
      }

      attachEventListeners() {
        // 筛选按钮
        document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const filter = e.target.dataset.filter;
            this.applyFilter(filter);
          });
        });

        // 搜索框 - 使用防抖
        const searchInput = document.getElementById('searchInput');
        let searchTimeout;
        searchInput.addEventListener('input', (e) => {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            this.search(e.target.value);
          }, 300);
        });

        // 显示数量
        document.getElementById('pageSize').addEventListener('change', (e) => {
          this.pageSize = parseInt(e.target.value);
          this.render();
        });

        // 加载更多
        document.getElementById('loadMoreBtn').addEventListener('click', () => {
          this.loadMore();
        });
      }

      applyFilter(filter) {
        this.currentFilter = filter;
        this.displayedCount = this.pageSize;

        // 更新按钮样式
        document.querySelectorAll('.filter-btn').forEach(btn => {
          if (btn.dataset.filter === filter) {
            btn.className = 'filter-btn px-4 py-2 rounded-lg bg-indigo-600 text-white';
          } else {
            btn.className = 'filter-btn px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300';
          }
        });

        // 应用筛选
        this.filteredCards = this.allCards.filter(card => {
          if (filter === 'all') return true;
          if (filter === 'virtual') return card.providesVirtualCard && !card.providesPhysicalCard;
          if (filter === 'physical') return card.providesPhysicalCard && !card.providesVirtualCard;
          if (filter === 'both') return card.providesVirtualCard && card.providesPhysicalCard;
          return true;
        });

        // 应用搜索词
        if (this.searchTerm) {
          this.filteredCards = this.filteredCards.filter(card =>
            card.name.toLowerCase().includes(this.searchTerm) ||
            card.issuer.toLowerCase().includes(this.searchTerm)
          );
        }

        this.render();
      }

      search(term) {
        this.searchTerm = term.toLowerCase();
        this.displayedCount = this.pageSize;
        this.applyFilter(this.currentFilter);
      }

      loadMore() {
        const remaining = this.filteredCards.length - this.displayedCount;
        const toLoad = Math.min(remaining, this.pageSize);

        if (toLoad > 0) {
          this.renderRows(this.displayedCount, this.displayedCount + toLoad);
          this.displayedCount += toLoad;
          this.updateStats();
        }

        // 隐藏按钮如果没有更多数据
        if (this.displayedCount >= this.filteredCards.length) {
          document.getElementById('loadMoreContainer').style.display = 'none';
        }
      }

      render() {
        const tbody = document.getElementById('tableBody');
        tbody.innerHTML = '';

        const toDisplay = Math.min(this.displayedCount, this.filteredCards.length);
        this.renderRows(0, toDisplay);

        // 显示/隐藏加载更多按钮
        const hasMore = this.filteredCards.length > toDisplay;
        document.getElementById('loadMoreContainer').style.display = hasMore ? 'block' : 'none';

        this.updateStats();
      }

      renderRows(start, end) {
        const tbody = document.getElementById('tableBody');
        const fragment = document.createDocumentFragment();

        for (let i = start; i < end && i < this.filteredCards.length; i++) {
          const card = this.filteredCards[i];
          const row = this.createRow(card, i + 1);
          fragment.appendChild(row);
        }

        tbody.appendChild(fragment);
      }

      createRow(card, index) {
        const tr = document.createElement('tr');
        tr.className = 'border-b hover:bg-gray-50 card-row';

        tr.innerHTML = `
          <td class="px-6 py-4">
            <div class="flex items-center gap-3">
              <span class="text-gray-500 text-sm w-8">${index}</span>
              <div>
                <div class="font-medium text-gray-900">
                  ${card.featured ? '<span class="text-yellow-500 mr-1">⭐</span>' : ''}
                  ${card.name}
                </div>
                <div class="text-sm text-gray-500">${card.issuer}</div>
              </div>
            </div>
          </td>
          <td class="px-4 py-4 text-center">
            ${card.providesVirtualCard ? `
              <div>
                <div class="text-green-600 font-medium">✓ 支持</div>
                <div class="text-xs text-gray-500">
                  ${card.virtualPrice === 0 ? '免费' : `$${card.virtualPrice}`}
                </div>
              </div>
            ` : '<div class="text-gray-400">-</div>'}
          </td>
          <td class="px-4 py-4 text-center">
            ${card.providesPhysicalCard ? `
              <div>
                <div class="text-blue-600 font-medium">✓ 支持</div>
                <div class="text-xs text-gray-500">
                  ${card.physicalPrice === 0 ? '免费' : `$${card.physicalPrice}`}
                </div>
              </div>
            ` : '<div class="text-gray-400">-</div>'}
          </td>
          <td class="px-4 py-4 text-center">
            <div class="text-sm">
              ${(card.virtualTransactionFee === 0 && card.physicalTransactionFee === 0) ?
                '<span class="text-green-600 font-medium">免费</span>' :
                `<span class="text-gray-700">${Math.min(
                  card.virtualTransactionFee || 999,
                  card.physicalTransactionFee || 999
                )}%</span>`
              }
            </div>
          </td>
          <td class="px-4 py-4 text-center">
            <a href="/cards/${card.slug}"
               class="inline-flex items-center px-3 py-1 bg-indigo-600 text-white text-sm rounded hover:bg-indigo-700">
              查看
            </a>
          </td>
        `;

        return tr;
      }

      updateStats() {
        // 更新统计信息
        const displayed = Math.min(this.displayedCount, this.filteredCards.length);
        const statsText = `显示 ${displayed} / ${this.filteredCards.length} 张卡片`;

        // 如果有统计元素，更新它
        const statsEl = document.querySelector('.text-gray-600');
        if (statsEl && statsEl.textContent.includes('显示')) {
          statsEl.textContent = statsText;
        }
      }
    }

    // 初始化表格
    const cardTable = new OptimizedCardTable(processedCards);
  </script>

  <style>
    /* 性能优化样式 */
    .card-row {
      contain: layout style paint;
    }

    /* 表格固定布局提升性能 */
    #cardsTable {
      table-layout: fixed;
    }

    /* 减少重绘 */
    .filter-btn {
      will-change: background-color;
      transition: background-color 0.2s;
    }
  </style>
</Layout>
