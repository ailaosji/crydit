// src/components/CommentCount.astro
---
export interface Props {
  cardSlug: string;
  cardTitle: string;
}

const { cardSlug, cardTitle } = Astro.props;

// Giscus配置 - 请替换为您的实际配置
const giscusConfig = {
  repo: 'your-username/your-repo', // 替换为您的GitHub仓库
  repoId: 'your-repo-id', // 替换为您的仓库ID
  category: 'General', // 替换为您的讨论分类
  categoryId: 'your-category-id', // 替换为您的分类ID
};
---

<span 
  class="comment-count-container" 
  data-card-slug={cardSlug}
  data-card-title={cardTitle}
  data-repo={giscusConfig.repo}
  data-repo-id={giscusConfig.repoId}
  data-category={giscusConfig.category}
  data-category-id={giscusConfig.categoryId}
>
  <span class="loading-comments">--</span>
</span>

<script>
  // 获取评论数的函数
  async function fetchCommentCount(container) {
    const cardSlug = container.dataset.cardSlug;
    const cardTitle = container.dataset.cardTitle;
    const repo = container.dataset.repo;
    const category = container.dataset.category;
    
    try {
      // 使用GitHub GraphQL API获取讨论数据
      // 注意：这需要GitHub API token，在生产环境中应该通过后端API代理
      
      // 为了演示，这里使用模拟数据
      // 实际使用时，您需要：
      // 1. 创建GitHub App或Personal Access Token
      // 2. 通过后端API代理请求GitHub GraphQL API
      // 3. 根据cardTitle或特定的mapping查找对应的discussion
      
      // 模拟API调用延迟
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // 模拟评论数数据
      const mockCommentCounts = {
        'binance-card': 156,
        'crypto-com-card': 89,
        'coinbase-card': 67,
        'nexo-card': 45,
        'wirex-card': 38,
        'revolut-card': 92,
        'plutus-card': 31,
        'bybit-card': 28,
        'default': Math.floor(Math.random() * 30 + 5)
      };
      
      const count = mockCommentCounts[cardSlug] || mockCommentCounts['default'];
      
      // 更新显示
      const countElement = container.querySelector('.loading-comments');
      if (countElement) {
        countElement.textContent = count;
        countElement.classList.remove('loading-comments');
        countElement.classList.add('comment-count');
      }
      
      return count;
      
    } catch (error) {
      console.error('Error fetching comment count:', error);
      const countElement = container.querySelector('.loading-comments');
      if (countElement) {
        countElement.textContent = '0';
        countElement.classList.remove('loading-comments');
      }
      return 0;
    }
  }
  
  // 批量获取所有评论数
  async function fetchAllCommentCounts() {
    const containers = document.querySelectorAll('.comment-count-container');
    
    // 使用Promise.all并行获取所有评论数
    const promises = Array.from(containers).map(container => 
      fetchCommentCount(container)
    );
    
    await Promise.all(promises);
  }
  
  // 页面加载完成后获取评论数
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', fetchAllCommentCounts);
  } else {
    fetchAllCommentCounts();
  }
</script>

<style>
  .comment-count-container {
    display: inline-flex;
    align-items: center;
  }
  
  .loading-comments {
    color: #9ca3af;
    font-size: 0.875rem;
  }
  
  .comment-count {
    color: #4b5563;
    font-weight: 500;
    font-size: 0.875rem;
  }
</style>